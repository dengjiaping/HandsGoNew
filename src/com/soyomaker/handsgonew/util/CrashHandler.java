package com.soyomaker.handsgonew.util;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.PrintStream;import java.text.SimpleDateFormat;import java.util.Date;import java.util.Locale;import android.content.Context;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.os.Build;import com.soyomaker.handsgonew.network.ConnectionUtil;import com.soyomaker.handsgonew.network.ConnectionUtil.NetworkState;import com.soyomaker.handsgonew.network.GenericTask;import com.soyomaker.handsgonew.network.TaskParams;import com.soyomaker.handsgonew.network.TaskResult;;/** * 将崩溃异常记录在文件中，方便我们查看异常 *  * @author Tsimle */public class CrashHandler implements Thread.UncaughtExceptionHandler {	private SimpleDateFormat mDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.CHINA);	private static final String mLogPath = StorageUtil.getDirByType(StorageUtil.DIR_TYPE_LOG);	private Thread.UncaughtExceptionHandler mDefaultHandler;	private Context mContext;	private static final String EXCEPTION_LOG_FILE_PATH = "crash.txt";	private static final int MAX_CRASHLOG_FILE_LENGTH = 1024 * 512;	private static final SimpleDateFormat sDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",			Locale.getDefault());	public CrashHandler(Context context) {		mDefaultHandler = Thread.getDefaultUncaughtExceptionHandler();		mContext = context.getApplicationContext();	}	@Override	public void uncaughtException(Thread thread, Throwable ex) {		ByteArrayOutputStream baos = null;		PrintStream printStream = null;		StringBuilder sb = new StringBuilder();		try {			baos = new ByteArrayOutputStream();			printStream = new PrintStream(baos);			ex.printStackTrace(printStream);			byte[] data = baos.toByteArray();			Throwable cause = ex.getCause();			while (cause != null) {				cause.printStackTrace(printStream);				cause = cause.getCause();			}			sb.append("Exception time:" + mDateFormat.format(new Date()) + " Thread Name:"					+ thread.getName() + " Thread id:" + thread.getId() + "\n");			sb.append(collectCrashDeviceInfo(mContext) + "\n");			sb.append(new String(data) + "\n");			writeLogInfoToFile(EXCEPTION_LOG_FILE_PATH, MAX_CRASHLOG_FILE_LENGTH, sb.toString());			data = null;		} catch (Exception e) {		} finally {			try {				if (printStream != null) {					printStream.close();				}				if (baos != null) {					baos.close();				}			} catch (Exception e) {			}		}		// 弹出程序crash的对话框		mDefaultHandler.uncaughtException(thread, ex);	}	public static void writeLogInfoToFile(final String filePath, final int logFileLength,			final String logInfo) {		try {			if (StorageUtil.isStorageWriteable()) {				// make sure file created				final File file = new File(mLogPath, filePath);				if (file.exists()) {					if (file.length() > logFileLength) {						file.delete();					}				}				if (!file.exists()) {					file.getParentFile().mkdirs();					file.createNewFile();				}				// async write log				new GenericTask() {					@Override					protected TaskResult doInBackground(TaskParams... params) {						FileWriter fw = null;						try {							fw = new FileWriter(file, true);							fw.append(sDateFormat.format(new Date()) + "  " + logInfo + "\r\n");							fw.flush();						} catch (IOException e) {						} finally {							if (fw != null) {								try {									fw.close();								} catch (IOException e) {								}							}						}						return null;					}				}.execute();			}		} catch (Exception e) {		}	}	/**	 * 收集程序崩溃的设备信息	 * 	 * @param context	 */	public String collectCrashDeviceInfo(Context context) {		StringBuilder sb = new StringBuilder();		try {			final PackageManager pm = context.getPackageManager();			final PackageInfo info = pm.getPackageInfo(context.getPackageName(), 0);			sb.append("版本").append(info.versionName).append(",").append(info.versionCode)					.append(",");			sb.append("型号").append(Build.MODEL).append(",");			sb.append("系统").append(Build.VERSION.RELEASE).append(",");			sb.append(getNetworkType());		} catch (final Exception e) {			// 忽略异常		}		return sb.toString();	}	private String getNetworkType() {		if (ConnectionUtil.getNetworkState(mContext) == NetworkState.WIFI) {			return "wifi";		} else {			String apn = ConnectionUtil.getAPN(mContext).apn;			return apn;		}	}}